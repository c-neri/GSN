{
  "address": "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTarget",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTarget",
          "type": "address"
        }
      ],
      "name": "TargetChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CALLDATA_SIZE_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FORWARDER_HUB_OVERHEAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAYMASTER_ACCEPTANCE_BUDGET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POST_RELAYED_CALL_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRE_RELAYED_CALL_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGasAndDataLimits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "acceptanceBudget",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preRelayedCallGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "postRelayedCallGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "calldataSizeLimit",
              "type": "uint256"
            }
          ],
          "internalType": "struct IPaymaster.GasAndDataLimits",
          "name": "limits",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRelayHub",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "gasUseWithoutPost",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "transactionCalldataGasUsed",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayWorker",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "paymaster",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "forwarder",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "paymasterData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "clientId",
              "type": "uint256"
            }
          ],
          "internalType": "struct GsnTypes.RelayData",
          "name": "relayData",
          "type": "tuple"
        }
      ],
      "name": "postRelayedCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "from",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "to",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "value",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "nonce",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "validUntilTime",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IForwarder.ForwardRequest",
              "name": "request",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "maxFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPriorityFeePerGas",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "transactionCalldataGasUsed",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "relayWorker",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "paymaster",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "forwarder",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "paymasterData",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256",
                  "name": "clientId",
                  "type": "uint256"
                }
              ],
              "internalType": "struct GsnTypes.RelayData",
              "name": "relayData",
              "type": "tuple"
            }
          ],
          "internalType": "struct GsnTypes.RelayRequest",
          "name": "relayRequest",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "approvalData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "maxPossibleGas",
          "type": "uint256"
        }
      ],
      "name": "preRelayedCall",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRelayHub",
          "name": "hub",
          "type": "address"
        }
      ],
      "name": "setRelayHub",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        }
      ],
      "name": "setTarget",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "target",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "userAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "versionPaymaster",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "withdrawRelayHubDepositTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3ce4d32b4ff977e38494b64ffac15efaa99d7b66a47b9f57d0a8f75ad17db25a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d",
    "transactionIndex": 0,
    "gasUsed": "2057607",
    "logsBloom": "0x
    "blockHash": "0xcf239334c8f7c42dbdba2bf80225796f5b13403e3af0ab988b1be15a1a7cccd1",
    "transactionHash": "0x3ce4d32b4ff977e38494b64ffac15efaa99d7b66a47b9f57d0a8f75ad17db25a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 25,
        "transactionHash": "0x3ce4d32b4ff977e38494b64ffac15efaa99d7b66a47b9f57d0a8f75ad17db25a",
        "address": "0xc6e7DF5E7b4f2A278906862b61205850344D4e7d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xcf239334c8f7c42dbdba2bf80225796f5b13403e3af0ab988b1be15a1a7cccd1"
      }
    ],
    "blockNumber": 25,
    "cumulativeGasUsed": "2057607",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d05794fc7702a68f201fe9b3b4c5769c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTarget\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTarget\",\"type\":\"address\"}],\"name\":\"TargetChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CALLDATA_SIZE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FORWARDER_HUB_OVERHEAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAYMASTER_ACCEPTANCE_BUDGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POST_RELAYED_CALL_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRE_RELAYED_CALL_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGasAndDataLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"acceptanceBudget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preRelayedCallGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRelayedCallGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"calldataSizeLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct IPaymaster.GasAndDataLimits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRelayHub\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"gasUseWithoutPost\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionCalldataGasUsed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"name\":\"postRelayedCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validUntilTime\",\"type\":\"uint256\"}],\"internalType\":\"struct IForwarder.ForwardRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionCalldataGasUsed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayWorker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"paymasterData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"clientId\",\"type\":\"uint256\"}],\"internalType\":\"struct GsnTypes.RelayData\",\"name\":\"relayData\",\"type\":\"tuple\"}],\"internalType\":\"struct GsnTypes.RelayRequest\",\"name\":\"relayRequest\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"approvalData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"maxPossibleGas\",\"type\":\"uint256\"}],\"name\":\"preRelayedCall\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRelayHub\",\"name\":\"hub\",\"type\":\"address\"}],\"name\":\"setRelayHub\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"setTarget\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"target\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionPaymaster\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"withdrawRelayHubDepositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getGasAndDataLimits()\":{\"returns\":{\"limits\":\"An instance of the `GasAndDataLimits` struct ##### `acceptanceBudget` If the transactions consumes more than `acceptanceBudget` this Paymaster will be charged for gas no matter what. Transaction that gets rejected after consuming more than `acceptanceBudget` gas is on this Paymaster's expense. Should be set to an amount gas this Paymaster expects to spend deciding whether to accept or reject a request. This includes gas consumed by calculations in the `preRelayedCall`, `Forwarder` and the recipient contract. :warning: **Warning** :warning: As long this value is above `preRelayedCallGasLimit` (see defaults in `BasePaymaster`), the Paymaster is guaranteed it will never pay for rejected transactions. If this value is below `preRelayedCallGasLimit`, it might might make Paymaster open to a \\\"griefing\\\" attack. The relayers should prefer lower `acceptanceBudget`, as it improves their chances of being compensated. From a Relay's point of view, this is the highest gas value a bad Paymaster may cost the relay, since the paymaster will pay anything above that value regardless of whether the transaction succeeds or reverts. Specifying value too high might make the call rejected by relayers (see `maxAcceptanceBudget` in server config). ##### `preRelayedCallGasLimit` The max gas usage of preRelayedCall. Any revert of the `preRelayedCall` is a request rejection by the paymaster. As long as `acceptanceBudget` is above `preRelayedCallGasLimit`, any such revert is not payed by the paymaster. ##### `postRelayedCallGasLimit` The max gas usage of postRelayedCall. The Paymaster is not charged for the maximum, only for actually used gas. Note that an OOG will revert the inner transaction, but the paymaster will be charged for it anyway.\"}},\"getRelayHub()\":{\"returns\":{\"_0\":\"The address of the `RelayHub` that is trusted by this Paymaster to execute the requests.\"}},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"The address of the `Forwarder` that is trusted by this Paymaster to execute the requests.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))\":{\"params\":{\"context\":\"The call context, as returned by the preRelayedCall\",\"gasUseWithoutPost\":\"The actual amount of gas used by the entire transaction, EXCEPT        the gas used by the postRelayedCall itself.\",\"relayData\":\"The relay params of the request. can be used by relayHub.calculateCharge()\",\"success\":\"`true` if the relayed call succeeded, false if it reverted\"}},\"preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)\":{\"params\":{\"approvalData\":\"- extra dapp-specific data (e.g. signature from trusted party)\",\"maxPossibleGas\":\"- based on values returned from `getGasAndDataLimits` the RelayHub will calculate the maximum possible amount of gas the user may be charged for. In order to convert this value to wei, the Paymaster has to call \\\"relayHub.calculateCharge()\\\"\",\"relayRequest\":\"- the full relay request structure\",\"signature\":\"- user's EIP712-compatible signature of the `relayRequest`. Note that in most cases the paymaster shouldn't try use it at all. It is always checked by the forwarder immediately after preRelayedCall returns.\"},\"returns\":{\"_0\":\"A byte array to be passed to postRelayedCall. Can contain any data needed by this Paymaster in any form or be empty if no extra data is needed.\",\"_1\":\"The flag that allows a Paymaster to \\\"delegate\\\" the rejection to the recipient code. It also means the Paymaster trust the recipient to reject fast: both preRelayedCall, forwarder check and recipient checks must fit into the GasLimits.acceptanceBudget, otherwise the TX is paid by the Paymaster. `true` if the Paymaster wants to reject the TX if the recipient reverts. `false` if the Paymaster wants rejects by the recipient to be completed on chain and paid by the Paymaster.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"versionPaymaster()\":{\"returns\":{\"_0\":\"version The SemVer string of this Paymaster's version.\"}},\"withdrawRelayHubDepositTo(uint256,address)\":{\"params\":{\"amount\":\"The amount to be subtracted from the sender.\",\"target\":\"The target to which the amount will be transferred.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getGasAndDataLimits()\":{\"notice\":\"Return the Gas Limits for Paymaster's functions and maximum msg.data length values for this Paymaster. This function allows different paymasters to have different properties without changes to the RelayHub.\"},\"getTrustedForwarder()\":{\"notice\":\":warning: **Warning** :warning: using incorrect Forwarder may cause the Paymaster to agreeing to pay for invalid transactions.\"},\"postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))\":{\"notice\":\"This method is called after the actual relayed function call. It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call. Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster is still committed to pay the relay for the entire transaction.\"},\"preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)\":{\"notice\":\"Called by the Relay in view mode and later by the `RelayHub` on-chain to validate that the Paymaster agrees to pay for this call. The request is considered to be rejected by the Paymaster in one of the following conditions:  - `preRelayedCall()` method reverts  - the `Forwarder` reverts because of nonce or signature error  - the `Paymaster` returned `rejectOnRecipientRevert: true` and the recipient contract reverted    (and all that did not consume more than `acceptanceBudget` gas). In any of the above cases, all Paymaster calls and the recipient call are reverted. In any other case the Paymaster will pay for the gas cost of the transaction. Note that even if `postRelayedCall` is reverted the Paymaster will be charged.\"},\"setRelayHub(address)\":{\"notice\":\"The owner of the Paymaster can change the instance of the RelayHub this Paymaster works with. :warning: **Warning** :warning: The deposit on the previous RelayHub must be withdrawn first.\"},\"setTrustedForwarder(address)\":{\"notice\":\"The owner of the Paymaster can change the instance of the Forwarder this Paymaster works with.the Recipients must trust this Forwarder as well in order for the configuration to remain functional.\"},\"withdrawRelayHubDepositTo(uint256,address)\":{\"notice\":\"Withdraw deposit from the RelayHub.\"}},\"notice\":\"a paymaster for a single recipient contract. - reject requests if destination is not the target contract. - reject any request if the target contract reverts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Paymaster.sol\":\"PaymasterContract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/BasePaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport \\\"./utils/GsnTypes.sol\\\";\\nimport \\\"./interfaces/IPaymaster.sol\\\";\\nimport \\\"./interfaces/IRelayHub.sol\\\";\\nimport \\\"./utils/GsnEip712Library.sol\\\";\\nimport \\\"./forwarder/IForwarder.sol\\\";\\n\\n/**\\n * @notice An abstract base class to be inherited by a concrete Paymaster.\\n * A subclass must implement:\\n *  - preRelayedCall\\n *  - postRelayedCall\\n */\\nabstract contract BasePaymaster is IPaymaster, Ownable, ERC165 {\\n    using ERC165Checker for address;\\n\\n    IRelayHub internal relayHub;\\n    address private _trustedForwarder;\\n\\n    /// @inheritdoc IPaymaster\\n    function getRelayHub() public override view returns (address) {\\n        return address(relayHub);\\n    }\\n\\n    //overhead of forwarder verify+signature, plus hub overhead.\\n    uint256 constant public FORWARDER_HUB_OVERHEAD = 50000;\\n\\n    //These parameters are documented in IPaymaster.GasAndDataLimits\\n    uint256 constant public PRE_RELAYED_CALL_GAS_LIMIT = 100000;\\n    uint256 constant public POST_RELAYED_CALL_GAS_LIMIT = 110000;\\n    uint256 constant public PAYMASTER_ACCEPTANCE_BUDGET = PRE_RELAYED_CALL_GAS_LIMIT + FORWARDER_HUB_OVERHEAD;\\n    uint256 constant public CALLDATA_SIZE_LIMIT = 10500;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC165) returns (bool) {\\n        return interfaceId == type(IPaymaster).interfaceId ||\\n            interfaceId == type(Ownable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @inheritdoc IPaymaster\\n    function getGasAndDataLimits()\\n    public\\n    override\\n    virtual\\n    view\\n    returns (\\n        IPaymaster.GasAndDataLimits memory limits\\n    ) {\\n        return IPaymaster.GasAndDataLimits(\\n            PAYMASTER_ACCEPTANCE_BUDGET,\\n            PRE_RELAYED_CALL_GAS_LIMIT,\\n            POST_RELAYED_CALL_GAS_LIMIT,\\n            CALLDATA_SIZE_LIMIT\\n        );\\n    }\\n\\n    /**\\n     * @notice this method must be called from preRelayedCall to validate that the forwarder\\n     * is approved by the paymaster as well as by the recipient contract.\\n     */\\n    function _verifyForwarder(GsnTypes.RelayRequest calldata relayRequest)\\n    internal\\n    virtual\\n    view\\n    {\\n        require(getTrustedForwarder() == relayRequest.relayData.forwarder, \\\"Forwarder is not trusted\\\");\\n        GsnEip712Library.verifyForwarderTrusted(relayRequest);\\n    }\\n\\n    function _verifyRelayHubOnly() internal virtual view {\\n        require(msg.sender == getRelayHub(), \\\"can only be called by RelayHub\\\");\\n    }\\n\\n    function _verifyValue(GsnTypes.RelayRequest calldata relayRequest) internal virtual view{\\n        require(relayRequest.request.value == 0, \\\"value transfer not supported\\\");\\n    }\\n\\n    function _verifyPaymasterData(GsnTypes.RelayRequest calldata relayRequest) internal virtual view {\\n        require(relayRequest.relayData.paymasterData.length == 0, \\\"should have no paymasterData\\\");\\n    }\\n\\n    function _verifyApprovalData(bytes calldata approvalData) internal virtual view{\\n        require(approvalData.length == 0, \\\"should have no approvalData\\\");\\n    }\\n\\n    /**\\n     * @notice The owner of the Paymaster can change the instance of the RelayHub this Paymaster works with.\\n     * :warning: **Warning** :warning: The deposit on the previous RelayHub must be withdrawn first.\\n     */\\n    function setRelayHub(IRelayHub hub) public onlyOwner {\\n        require(address(hub).supportsInterface(type(IRelayHub).interfaceId), \\\"target is not a valid IRelayHub\\\");\\n        relayHub = hub;\\n    }\\n\\n    /**\\n     * @notice The owner of the Paymaster can change the instance of the Forwarder this Paymaster works with.\\n     * @notice the Recipients must trust this Forwarder as well in order for the configuration to remain functional.\\n     */\\n    function setTrustedForwarder(address forwarder) public virtual onlyOwner {\\n        require(forwarder.supportsInterface(type(IForwarder).interfaceId), \\\"target is not a valid IForwarder\\\");\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function getTrustedForwarder() public virtual view override returns (address){\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @notice Any native Ether transferred into the paymaster is transferred as a deposit to the RelayHub.\\n     * This way, we don't need to understand the RelayHub API in order to replenish the paymaster.\\n     */\\n    receive() external virtual payable {\\n        require(address(relayHub) != address(0), \\\"relay hub address not set\\\");\\n        relayHub.depositFor{value:msg.value}(address(this));\\n    }\\n\\n    /**\\n     * @notice Withdraw deposit from the RelayHub.\\n     * @param amount The amount to be subtracted from the sender.\\n     * @param target The target to which the amount will be transferred.\\n     */\\n    function withdrawRelayHubDepositTo(uint256 amount, address payable target) public onlyOwner {\\n        relayHub.withdraw(target, amount);\\n    }\\n\\n    /// @inheritdoc IPaymaster\\n    function preRelayedCall(\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        uint256 maxPossibleGas\\n    )\\n    external\\n    override\\n    returns (bytes memory, bool) {\\n        _verifyRelayHubOnly();\\n        _verifyForwarder(relayRequest);\\n        _verifyValue(relayRequest);\\n        _verifyPaymasterData(relayRequest);\\n        _verifyApprovalData(approvalData);\\n        return _preRelayedCall(relayRequest, signature, approvalData, maxPossibleGas);\\n    }\\n\\n\\n    /**\\n     * @notice internal logic the paymasters need to provide to select which transactions they are willing to pay for\\n     * @notice see the documentation for `IPaymaster::preRelayedCall` for details\\n     */\\n    function _preRelayedCall(\\n        GsnTypes.RelayRequest calldata,\\n        bytes calldata,\\n        bytes calldata,\\n        uint256\\n    )\\n    internal\\n    virtual\\n    returns (bytes memory, bool);\\n\\n    /// @inheritdoc IPaymaster\\n    function postRelayedCall(\\n        bytes calldata context,\\n        bool success,\\n        uint256 gasUseWithoutPost,\\n        GsnTypes.RelayData calldata relayData\\n    )\\n    external\\n    override\\n    {\\n        _verifyRelayHubOnly();\\n        _postRelayedCall(context, success, gasUseWithoutPost, relayData);\\n    }\\n\\n    /**\\n     * @notice internal logic the paymasters need to provide if they need to take some action after the transaction\\n     * @notice see the documentation for `IPaymaster::postRelayedCall` for details\\n     */\\n    function _postRelayedCall(\\n        bytes calldata,\\n        bool,\\n        uint256,\\n        GsnTypes.RelayData calldata\\n    )\\n    internal\\n    virtual;\\n}\\n\",\"keccak256\":\"0xcd6a501e35d31a1732c1c1bcdd8d32e7f4ddbd4018dcbde4db7220efa4ec3e13\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/forwarder/IForwarder.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\n/**\\n * @title The Forwarder Interface\\n * @notice The contracts implementing this interface take a role of authorization, authentication and replay protection\\n * for contracts that choose to trust a `Forwarder`, instead of relying on a mechanism built into the Ethereum protocol.\\n *\\n * @notice if the `Forwarder` contract decides that an incoming `ForwardRequest` is valid, it must append 20 bytes that\\n * represent the caller to the `data` field of the request and send this new data to the target address (the `to` field)\\n *\\n * :warning: **Warning** :warning: The Forwarder can have a full control over a `Recipient` contract.\\n * Any vulnerability in a `Forwarder` implementation can make all of its `Recipient` contracts susceptible!\\n * Recipient contracts should only trust forwarders that passed through security audit,\\n * otherwise they are susceptible to identity theft.\\n */\\ninterface IForwarder is IERC165 {\\n\\n    /**\\n     * @notice A representation of a request for a `Forwarder` to send `data` on behalf of a `from` to a target (`to`).\\n     */\\n    struct ForwardRequest {\\n        address from;\\n        address to;\\n        uint256 value;\\n        uint256 gas;\\n        uint256 nonce;\\n        bytes data;\\n        uint256 validUntilTime;\\n    }\\n\\n    event DomainRegistered(bytes32 indexed domainSeparator, bytes domainValue);\\n\\n    event RequestTypeRegistered(bytes32 indexed typeHash, string typeStr);\\n\\n    /**\\n     * @param from The address of a sender.\\n     * @return The nonce for this address.\\n     */\\n    function getNonce(address from)\\n    external view\\n    returns(uint256);\\n\\n    /**\\n     * @notice Verify the transaction is valid and can be executed.\\n     * Implementations must validate the signature and the nonce of the request are correct.\\n     * Does not revert and returns successfully if the input is valid.\\n     * Reverts if any validation has failed. For instance, if either signature or nonce are incorrect.\\n     * Reverts if `domainSeparator` or `requestTypeHash` are not registered as well.\\n     */\\n    function verify(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    ) external view;\\n\\n    /**\\n     * @notice Executes a transaction specified by the `ForwardRequest`.\\n     * The transaction is first verified and then executed.\\n     * The success flag and returned bytes array of the `CALL` are returned as-is.\\n     *\\n     * This method would revert only in case of a verification error.\\n     *\\n     * All the target errors are reported using the returned success flag and returned bytes array.\\n     *\\n     * @param forwardRequest All requested transaction parameters.\\n     * @param domainSeparator The domain used when signing this request.\\n     * @param requestTypeHash The request type used when signing this request.\\n     * @param suffixData The ABI-encoded extension data for the current `RequestType` used when signing this request.\\n     * @param signature The client signature to be validated.\\n     *\\n     * @return success The success flag of the underlying `CALL` to the target address.\\n     * @return ret The byte array returned by the underlying `CALL` to the target address.\\n     */\\n    function execute(\\n        ForwardRequest calldata forwardRequest,\\n        bytes32 domainSeparator,\\n        bytes32 requestTypeHash,\\n        bytes calldata suffixData,\\n        bytes calldata signature\\n    )\\n    external payable\\n    returns (bool success, bytes memory ret);\\n\\n    /**\\n     * @notice Register a new Request typehash.\\n     *\\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\\n     *\\n     * @param typeName The name of the request type.\\n     * @param typeSuffix Any extra data after the generic params. Must contain add at least one param.\\n     * The generic ForwardRequest type is always registered by the constructor.\\n     */\\n    function registerRequestType(string calldata typeName, string calldata typeSuffix) external;\\n\\n    /**\\n     * @notice Register a new domain separator.\\n     *\\n     * @notice This is necessary for the Forwarder to be able to verify the signatures conforming to the ERC-712.\\n     *\\n     * @notice The domain separator must have the following fields: `name`, `version`, `chainId`, `verifyingContract`.\\n     * The `chainId` is the current network's `chainId`, and the `verifyingContract` is this Forwarder's address.\\n     * This method accepts the domain name and version to create and register the domain separator value.\\n     * @param name The domain's display name.\\n     * @param version The domain/protocol version.\\n     */\\n    function registerDomainSeparator(string calldata name, string calldata version) external;\\n}\\n\",\"keccak256\":\"0x28669953bd3dcc98a5f959fa3cac97444584b6fbe59341681b9a59f11a83b171\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/interfaces/IERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n}\\n\",\"keccak256\":\"0xc762358681e3494519a5fff2f7e3f0f74f9c9f395f23b00cdfb45e0fb9ef8170\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\nimport \\\"../utils/GsnTypes.sol\\\";\\n\\n/**\\n * @title The Paymaster Interface\\n * @notice Contracts implementing this interface exist to make decision about paying the transaction fee to the relay.\\n *\\n * @notice There are two callbacks here that are executed by the RelayHub: `preRelayedCall` and `postRelayedCall`.\\n *\\n * @notice It is recommended that your implementation inherits from the abstract BasePaymaster contract.\\n*/\\ninterface IPaymaster is IERC165 {\\n    /**\\n     * @notice The limits this Paymaster wants to be imposed by the RelayHub on user input. See `getGasAndDataLimits`.\\n     */\\n    struct GasAndDataLimits {\\n        uint256 acceptanceBudget;\\n        uint256 preRelayedCallGasLimit;\\n        uint256 postRelayedCallGasLimit;\\n        uint256 calldataSizeLimit;\\n    }\\n\\n    /**\\n     * @notice Return the Gas Limits for Paymaster's functions and maximum msg.data length values for this Paymaster.\\n     * This function allows different paymasters to have different properties without changes to the RelayHub.\\n     * @return limits An instance of the `GasAndDataLimits` struct\\n     *\\n     * ##### `acceptanceBudget`\\n     * If the transactions consumes more than `acceptanceBudget` this Paymaster will be charged for gas no matter what.\\n     * Transaction that gets rejected after consuming more than `acceptanceBudget` gas is on this Paymaster's expense.\\n     *\\n     * Should be set to an amount gas this Paymaster expects to spend deciding whether to accept or reject a request.\\n     * This includes gas consumed by calculations in the `preRelayedCall`, `Forwarder` and the recipient contract.\\n     *\\n     * :warning: **Warning** :warning: As long this value is above `preRelayedCallGasLimit`\\n     * (see defaults in `BasePaymaster`), the Paymaster is guaranteed it will never pay for rejected transactions.\\n     * If this value is below `preRelayedCallGasLimit`, it might might make Paymaster open to a \\\"griefing\\\" attack.\\n     *\\n     * The relayers should prefer lower `acceptanceBudget`, as it improves their chances of being compensated.\\n     * From a Relay's point of view, this is the highest gas value a bad Paymaster may cost the relay,\\n     * since the paymaster will pay anything above that value regardless of whether the transaction succeeds or reverts.\\n     * Specifying value too high might make the call rejected by relayers (see `maxAcceptanceBudget` in server config).\\n     *\\n     * ##### `preRelayedCallGasLimit`\\n     * The max gas usage of preRelayedCall. Any revert of the `preRelayedCall` is a request rejection by the paymaster.\\n     * As long as `acceptanceBudget` is above `preRelayedCallGasLimit`, any such revert is not payed by the paymaster.\\n     *\\n     * ##### `postRelayedCallGasLimit`\\n     * The max gas usage of postRelayedCall. The Paymaster is not charged for the maximum, only for actually used gas.\\n     * Note that an OOG will revert the inner transaction, but the paymaster will be charged for it anyway.\\n     */\\n    function getGasAndDataLimits()\\n    external\\n    view\\n    returns (\\n        GasAndDataLimits memory limits\\n    );\\n\\n    /**\\n     * @notice :warning: **Warning** :warning: using incorrect Forwarder may cause the Paymaster to agreeing to pay for invalid transactions.\\n     * @return trustedForwarder The address of the `Forwarder` that is trusted by this Paymaster to execute the requests.\\n     */\\n    function getTrustedForwarder() external view returns (address trustedForwarder);\\n\\n    /**\\n     * @return relayHub The address of the `RelayHub` that is trusted by this Paymaster to execute the requests.\\n     */\\n    function getRelayHub() external view returns (address relayHub);\\n\\n    /**\\n     * @notice Called by the Relay in view mode and later by the `RelayHub` on-chain to validate that\\n     * the Paymaster agrees to pay for this call.\\n     *\\n     * The request is considered to be rejected by the Paymaster in one of the following conditions:\\n     *  - `preRelayedCall()` method reverts\\n     *  - the `Forwarder` reverts because of nonce or signature error\\n     *  - the `Paymaster` returned `rejectOnRecipientRevert: true` and the recipient contract reverted\\n     *    (and all that did not consume more than `acceptanceBudget` gas).\\n     *\\n     * In any of the above cases, all Paymaster calls and the recipient call are reverted.\\n     * In any other case the Paymaster will pay for the gas cost of the transaction.\\n     * Note that even if `postRelayedCall` is reverted the Paymaster will be charged.\\n     *\\n\\n     * @param relayRequest - the full relay request structure\\n     * @param signature - user's EIP712-compatible signature of the `relayRequest`.\\n     * Note that in most cases the paymaster shouldn't try use it at all. It is always checked\\n     * by the forwarder immediately after preRelayedCall returns.\\n     * @param approvalData - extra dapp-specific data (e.g. signature from trusted party)\\n     * @param maxPossibleGas - based on values returned from `getGasAndDataLimits`\\n     * the RelayHub will calculate the maximum possible amount of gas the user may be charged for.\\n     * In order to convert this value to wei, the Paymaster has to call \\\"relayHub.calculateCharge()\\\"\\n     *\\n     * @return context\\n     * A byte array to be passed to postRelayedCall.\\n     * Can contain any data needed by this Paymaster in any form or be empty if no extra data is needed.\\n     * @return rejectOnRecipientRevert\\n     * The flag that allows a Paymaster to \\\"delegate\\\" the rejection to the recipient code.\\n     * It also means the Paymaster trust the recipient to reject fast: both preRelayedCall,\\n     * forwarder check and recipient checks must fit into the GasLimits.acceptanceBudget,\\n     * otherwise the TX is paid by the Paymaster.\\n     * `true` if the Paymaster wants to reject the TX if the recipient reverts.\\n     * `false` if the Paymaster wants rejects by the recipient to be completed on chain and paid by the Paymaster.\\n     */\\n    function preRelayedCall(\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        uint256 maxPossibleGas\\n    )\\n    external\\n    returns (bytes memory context, bool rejectOnRecipientRevert);\\n\\n    /**\\n     * @notice This method is called after the actual relayed function call.\\n     * It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call.\\n     *\\n     * Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster\\n     * is still committed to pay the relay for the entire transaction.\\n     *\\n     * @param context The call context, as returned by the preRelayedCall\\n     * @param success `true` if the relayed call succeeded, false if it reverted\\n     * @param gasUseWithoutPost The actual amount of gas used by the entire transaction, EXCEPT\\n     *        the gas used by the postRelayedCall itself.\\n     * @param relayData The relay params of the request. can be used by relayHub.calculateCharge()\\n     *\\n     */\\n    function postRelayedCall(\\n        bytes calldata context,\\n        bool success,\\n        uint256 gasUseWithoutPost,\\n        GsnTypes.RelayData calldata relayData\\n    ) external;\\n\\n    /**\\n     * @return version The SemVer string of this Paymaster's version.\\n     */\\n    function versionPaymaster() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xeedb6d83ce600a97a4abbb614d24c65cb2ebc06a1784cc6a81afa9233d1331b6\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/interfaces/IRelayHub.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC165.sol\\\";\\n\\nimport \\\"../utils/GsnTypes.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\n\\n/**\\n * @title The RelayHub interface\\n * @notice The implementation of this interface provides all the information the GSN client needs to\\n * create a valid `RelayRequest` and also serves as an entry point for such requests.\\n *\\n * @notice The RelayHub also handles all the related financial records and hold the balances of participants.\\n * The Paymasters keep their Ether deposited in the `RelayHub` in order to pay for the `RelayRequest`s that thay choose\\n * to pay for, and Relay Servers keep their earned Ether in the `RelayHub` until they choose to `withdraw()`\\n *\\n * @notice The RelayHub on each supported network only needs a single instance and there is usually no need for dApp\\n * developers or Relay Server operators to redeploy, reimplement, modify or override the `RelayHub`.\\n */\\ninterface IRelayHub is IERC165 {\\n    /**\\n     * @notice A struct that contains all the parameters of the `RelayHub` that can be modified after the deployment.\\n     */\\n    struct RelayHubConfig {\\n        // maximum number of worker accounts allowed per manager\\n        uint256 maxWorkerCount;\\n        // Gas set aside for all relayCall() instructions to prevent unexpected out-of-gas exceptions\\n        uint256 gasReserve;\\n        // Gas overhead to calculate gasUseWithoutPost\\n        uint256 postOverhead;\\n        // Gas cost of all relayCall() instructions after actual 'calculateCharge()'\\n        // Assume that relay has non-zero balance (costs 15'000 more otherwise).\\n        uint256 gasOverhead;\\n        // Minimum unstake delay seconds of a relay manager's stake on the StakeManager\\n        uint256 minimumUnstakeDelay;\\n        // Developers address\\n        address devAddress;\\n        // 0 < fee < 100, as percentage of total charge from paymaster to relayer\\n        uint8 devFee;\\n        // baseRelayFee The base fee the Relay Server charges for a single transaction in Ether, in wei.\\n        uint80 baseRelayFee;\\n        // pctRelayFee The percent of the total charge to add as a Relay Server fee to the total charge.\\n        uint16 pctRelayFee;\\n    }\\n\\n    /// @notice Emitted when a configuration of the `RelayHub` is changed\\n    event RelayHubConfigured(RelayHubConfig config);\\n\\n    /// @notice Emitted when relays are added by a relayManager\\n    event RelayWorkersAdded(\\n        address indexed relayManager,\\n        address[] newRelayWorkers,\\n        uint256 workersCount\\n    );\\n\\n    /// @notice Emitted when an account withdraws funds from the `RelayHub`.\\n    event Withdrawn(\\n        address indexed account,\\n        address indexed dest,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when `depositFor` is called, including the amount and account that was funded.\\n    event Deposited(\\n        address indexed paymaster,\\n        address indexed from,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted for each token configured for staking in setMinimumStakes\\n    event StakingTokenDataChanged(\\n        address token,\\n        uint256 minimumStake\\n    );\\n\\n    /**\\n     * @notice Emitted when an attempt to relay a call fails and the `Paymaster` does not accept the transaction.\\n     * The actual relayed call was not executed, and the recipient not charged.\\n     * @param reason contains a revert reason returned from preRelayedCall or forwarder.\\n     */\\n    event TransactionRejectedByPaymaster(\\n        address indexed relayManager,\\n        address indexed paymaster,\\n        bytes32 indexed relayRequestID,\\n        address from,\\n        address to,\\n        address relayWorker,\\n        bytes4 selector,\\n        uint256 innerGasUsed,\\n        bytes reason\\n    );\\n\\n    /**\\n     * @notice Emitted when a transaction is relayed. Note that the actual internal function call might be reverted.\\n     * The reason for a revert will be indicated in the `status` field of a corresponding `RelayCallStatus` value.\\n     * @notice `charge` is the Ether value deducted from the `Paymaster` balance.\\n     * The amount added to the `relayManager` balance will be lower if there is an activated `devFee` in the `config`.\\n     */\\n    event TransactionRelayed(\\n        address indexed relayManager,\\n        address indexed relayWorker,\\n        bytes32 indexed relayRequestID,\\n        address from,\\n        address to,\\n        address paymaster,\\n        bytes4 selector,\\n        RelayCallStatus status,\\n        uint256 charge\\n    );\\n\\n    /// @notice This event is emitted in case the internal function returns a value or reverts with a revert string.\\n    event TransactionResult(\\n        RelayCallStatus status,\\n        bytes returnValue\\n    );\\n\\n    /// @notice This event is emitted in case this `RelayHub` is deprecated and will stop serving transactions soon.\\n    event HubDeprecated(uint256 deprecationTime);\\n\\n    /**\\n     * @notice This event is emitted in case a `relayManager` has been deemed \\\"abandoned\\\" for being\\n     * unresponsive for a prolonged period of time.\\n     * @notice This event means the entire balance of the relay has been transferred to the `devAddress`.\\n     */\\n    event AbandonedRelayManagerBalanceEscheated(\\n        address indexed relayManager,\\n        uint256 balance\\n    );\\n\\n    /**\\n     * Error codes that describe all possible failure reasons reported in the `TransactionRelayed` event `status` field.\\n     *  @param OK The transaction was successfully relayed and execution successful - never included in the event.\\n     *  @param RelayedCallFailed The transaction was relayed, but the relayed call failed.\\n     *  @param RejectedByPreRelayed The transaction was not relayed due to preRelatedCall reverting.\\n     *  @param RejectedByForwarder The transaction was not relayed due to forwarder check (signature,nonce).\\n     *  @param PostRelayedFailed The transaction was relayed and reverted due to postRelatedCall reverting.\\n     *  @param PaymasterBalanceChanged The transaction was relayed and reverted due to the paymaster balance change.\\n     */\\n    enum RelayCallStatus {\\n        OK,\\n        RelayedCallFailed,\\n        RejectedByPreRelayed,\\n        RejectedByForwarder,\\n        RejectedByRecipientRevert,\\n        PostRelayedFailed,\\n        PaymasterBalanceChanged\\n    }\\n\\n    /**\\n     * @notice Add new worker addresses controlled by the sender who must be a staked Relay Manager address.\\n     * Emits a `RelayWorkersAdded` event.\\n     * This function can be called multiple times, emitting new events.\\n     */\\n    function addRelayWorkers(address[] calldata newRelayWorkers) external;\\n\\n    /**\\n     * @notice The `RelayRegistrar` callback to notify the `RelayHub` that this `relayManager` has updated registration.\\n     */\\n    function onRelayServerRegistered(address relayManager) external;\\n\\n    // Balance management\\n\\n    /**\\n     * @notice Deposits ether for a `Paymaster`, so that it can and pay for relayed transactions.\\n     * :warning: **Warning** :warning: Unused balance can only be withdrawn by the holder itself, by calling `withdraw`.\\n     * Emits a `Deposited` event.\\n     */\\n    function depositFor(address target) external payable;\\n\\n    /**\\n     * @notice Withdraws from an account's balance, sending it back to the caller.\\n     * Relay Managers call this to retrieve their revenue, and `Paymasters` can also use it to reduce their funding.\\n     * Emits a `Withdrawn` event.\\n     */\\n    function withdraw(address payable dest, uint256 amount) external;\\n\\n    /**\\n     * @notice Withdraws from an account's balance, sending funds to multiple provided addresses.\\n     * Relay Managers call this to retrieve their revenue, and `Paymasters` can also use it to reduce their funding.\\n     * Emits a `Withdrawn` event for each destination.\\n     */\\n    function withdrawMultiple(address payable[] memory dest, uint256[] memory amount) external;\\n\\n    // Relaying\\n\\n\\n    /**\\n     * @notice Relays a transaction. For this to succeed, multiple conditions must be met:\\n     *  - `Paymaster`'s `preRelayCall` method must succeed and not revert.\\n     *  - the `msg.sender` must be a registered Relay Worker that the user signed to use.\\n     *  - the transaction's gas fees must be equal or larger than the ones that were signed by the sender.\\n     *  - the transaction must have enough gas to run all internal transactions if they use all gas available to them.\\n     *  - the `Paymaster` must have enough balance to pay the Relay Worker if all gas is spent.\\n     *\\n     * @notice If all conditions are met, the call will be relayed and the `Paymaster` charged.\\n     *\\n     * @param domainSeparatorName The name of the Domain Separator used to verify the EIP-712 signature\\n     * @param maxAcceptanceBudget The maximum valid value for `paymaster.getGasLimits().acceptanceBudget` to return.\\n     * @param relayRequest All details of the requested relayed call.\\n     * @param signature The client's EIP-712 signature over the `relayRequest` struct.\\n     * @param approvalData The dapp-specific data forwarded to the `Paymaster`'s `preRelayedCall` method.\\n     * This value is **not** verified by the `RelayHub` in any way.\\n     * As an example, it can be used to pass some kind of a third-party signature to the `Paymaster` for verification.\\n     *\\n     * Emits a `TransactionRelayed` event regardless of whether the transaction succeeded or failed.\\n     */\\n    function relayCall(\\n        string calldata domainSeparatorName,\\n        uint256 maxAcceptanceBudget,\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData\\n    )\\n    external\\n    returns (\\n        bool paymasterAccepted,\\n        uint256 charge,\\n        IRelayHub.RelayCallStatus status,\\n        bytes memory returnValue\\n    );\\n\\n    /**\\n     * @notice In case the Relay Worker has been found to be in violation of some rules by the `Penalizer` contract,\\n     * the `Penalizer` will call this method to execute a penalization.\\n     * The `RelayHub` will look up the Relay Manager of the given Relay Worker and will forward the call to\\n     * the `StakeManager` contract. The `RelayHub` does not perform the actual penalization either.\\n     * @param relayWorker The address of the Relay Worker that committed a penalizable offense.\\n     * @param beneficiary The address that called the `Penalizer` and will receive a reward for it.\\n     */\\n    function penalize(address relayWorker, address payable beneficiary) external;\\n\\n    /**\\n     * @notice Sets or changes the configuration of this `RelayHub`.\\n     * @param _config The new configuration.\\n     */\\n    function setConfiguration(RelayHubConfig memory _config) external;\\n\\n    /**\\n     * @notice Sets or changes the minimum amount of a given `token` that needs to be staked so that the Relay Manager\\n     * is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking.\\n     * @param token An array of addresses of ERC-20 compatible tokens.\\n     * @param minimumStake An array of minimal amounts necessary for a corresponding token, in wei.\\n     */\\n    function setMinimumStakes(IERC20[] memory token, uint256[] memory minimumStake) external;\\n\\n    /**\\n     * @notice Deprecate hub by reverting all incoming `relayCall()` calls starting from a given timestamp\\n     * @param _deprecationTime The timestamp in seconds after which the `RelayHub` stops serving transactions.\\n     */\\n    function deprecateHub(uint256 _deprecationTime) external;\\n\\n    /**\\n     * @notice\\n     * @param relayManager\\n     */\\n    function escheatAbandonedRelayBalance(address relayManager) external;\\n\\n    /**\\n     * @notice The fee is expressed as a base fee in wei plus percentage of the actual charge.\\n     * For example, a value '40' stands for a 40% fee, so the recipient will be charged for 1.4 times the spent amount.\\n     * @param gasUsed An amount of gas used by the transaction.\\n     * @param relayData The details of a transaction signed by the sender.\\n     * @return The calculated charge, in wei.\\n     */\\n    function calculateCharge(uint256 gasUsed, GsnTypes.RelayData calldata relayData) external view returns (uint256);\\n\\n    /**\\n     * @notice The fee is expressed as a  percentage of the actual charge.\\n     * For example, a value '40' stands for a 40% fee, so the Relay Manager will only get 60% of the `charge`.\\n     * @param charge The amount of Ether in wei the Paymaster will be charged for this transaction.\\n     * @return The calculated devFee, in wei.\\n     */\\n    function calculateDevCharge(uint256 charge) external view returns (uint256);\\n    /* getters */\\n\\n    /// @return config The configuration of the `RelayHub`.\\n    function getConfiguration() external view returns (RelayHubConfig memory config);\\n\\n    /**\\n     * @param token An address of an ERC-20 compatible tokens.\\n     * @return The minimum amount of a given `token` that needs to be staked so that the Relay Manager\\n     * is considered to be 'staked' by this `RelayHub`. Zero value means this token is not allowed for staking.\\n     */\\n    function getMinimumStakePerToken(IERC20 token) external view returns (uint256);\\n\\n    /**\\n     * @param worker An address of the Relay Worker.\\n     * @return The address of its Relay Manager.\\n     */\\n    function getWorkerManager(address worker) external view returns (address);\\n\\n    /**\\n     * @param manager An address of the Relay Manager.\\n     * @return The count of Relay Workers associated with this Relay Manager.\\n     */\\n    function getWorkerCount(address manager) external view returns (uint256);\\n\\n    /// @return An account's balance. It can be either a deposit of a `Paymaster`, or a revenue of a Relay Manager.\\n    function balanceOf(address target) external view returns (uint256);\\n\\n    /// @return The `StakeManager` address for this `RelayHub`.\\n    function getStakeManager() external view returns (IStakeManager);\\n\\n    /// @return The `Penalizer` address for this `RelayHub`.\\n    function getPenalizer() external view returns (address);\\n\\n    /// @return The `RelayRegistrar` address for this `RelayHub`.\\n    function getRelayRegistrar() external view returns (address);\\n\\n    /// @return The `BatchGateway` address for this `RelayHub`.\\n    function getBatchGateway() external view returns (address);\\n\\n    /**\\n     * @notice Uses `StakeManager` to decide if the Relay Manager can be considered staked or not.\\n     * Returns if the stake's token, amount and delay satisfy all requirements, reverts otherwise.\\n     */\\n    function verifyRelayManagerStaked(address relayManager) external view;\\n\\n    /**\\n     * @notice Uses `StakeManager` to check if the Relay Manager can be considered abandoned or not.\\n     * Returns true if the stake's abandonment time is in the past including the escheatment delay, false otherwise.\\n     */\\n    function isRelayEscheatable(address relayManager) external view returns (bool);\\n\\n    /// @return `true` if the `RelayHub` is deprecated, `false` it it is not deprecated and can serve transactions.\\n    function isDeprecated() external view returns (bool);\\n\\n    /// @return The timestamp from which the hub no longer allows relaying calls.\\n    function getDeprecationTime() external view returns (uint256);\\n\\n    /// @return The block number in which the contract has been deployed.\\n    function getCreationBlock() external view returns (uint256);\\n\\n    /// @return a SemVer-compliant version of the `RelayHub` contract.\\n    function versionHub() external view returns (string memory);\\n\\n    /// @return A total measurable amount of gas left to current execution. Same as 'gasleft()' for pure EVMs.\\n    function aggregateGasleft() external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x0ab29ca5985c98f530e5985e3d9dd14f00d34527410ce980b51b26e57bb0121c\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity >=0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @title The StakeManager Interface\\n * @notice In order to prevent an attacker from registering a large number of unresponsive relays, the GSN requires\\n * the Relay Server to maintain a permanently locked stake in the system before being able to register.\\n *\\n * @notice Also, in some cases the behavior of a Relay Server may be found to be illegal by a `Penalizer` contract.\\n * In such case, the stake will never be returned to the Relay Server operator and will be slashed.\\n *\\n * @notice An implementation of this interface is tasked with keeping Relay Servers' stakes, made in any ERC-20 token.\\n * Note that the `RelayHub` chooses which ERC-20 tokens to support and how much stake is needed.\\n */\\ninterface IStakeManager is IERC165 {\\n\\n    /// @notice Emitted when a `stake` or `unstakeDelay` are initialized or increased.\\n    event StakeAdded(\\n        address indexed relayManager,\\n        address indexed owner,\\n        IERC20 token,\\n        uint256 stake,\\n        uint256 unstakeDelay\\n    );\\n\\n    /// @notice Emitted once a stake is scheduled for withdrawal.\\n    event StakeUnlocked(\\n        address indexed relayManager,\\n        address indexed owner,\\n        uint256 withdrawTime\\n    );\\n\\n    /// @notice Emitted when owner withdraws `relayManager` funds.\\n    event StakeWithdrawn(\\n        address indexed relayManager,\\n        address indexed owner,\\n        IERC20 token,\\n        uint256 amount\\n    );\\n\\n    /// @notice Emitted when an authorized `RelayHub` penalizes a `relayManager`.\\n    event StakePenalized(\\n        address indexed relayManager,\\n        address indexed beneficiary,\\n        IERC20 token,\\n        uint256 reward\\n    );\\n\\n    /// @notice Emitted when a `relayManager` adds a new `RelayHub` to a list of authorized.\\n    event HubAuthorized(\\n        address indexed relayManager,\\n        address indexed relayHub\\n    );\\n\\n    /// @notice Emitted when a `relayManager` removes a `RelayHub` from a list of authorized.\\n    event HubUnauthorized(\\n        address indexed relayManager,\\n        address indexed relayHub,\\n        uint256 removalTime\\n    );\\n\\n    /// @notice Emitted when a `relayManager` sets its `owner`. This is necessary to prevent stake hijacking.\\n    event OwnerSet(\\n        address indexed relayManager,\\n        address indexed owner\\n    );\\n\\n    /// @notice Emitted when a `burnAddress` is changed.\\n    event BurnAddressSet(\\n        address indexed burnAddress\\n    );\\n\\n    /// @notice Emitted when a `devAddress` is changed.\\n    event DevAddressSet(\\n        address indexed devAddress\\n    );\\n\\n    /// @notice Emitted if Relay Server is inactive for an `abandonmentDelay` and contract owner initiates its removal.\\n    event RelayServerAbandoned(\\n        address indexed relayManager,\\n        uint256 abandonedTime\\n    );\\n\\n    /// @notice Emitted to indicate an action performed by a relay server to prevent it from being marked as abandoned.\\n    event RelayServerKeepalive(\\n        address indexed relayManager,\\n        uint256 keepaliveTime\\n    );\\n\\n    /// @notice Emitted when the stake of an abandoned relayer has been confiscated and transferred to the `devAddress`.\\n    event AbandonedRelayManagerStakeEscheated(\\n        address indexed relayManager,\\n        address indexed owner,\\n        IERC20 token,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param stake - amount of ether staked for this relay\\n     * @param unstakeDelay - number of seconds to elapse before the owner can retrieve the stake after calling 'unlock'\\n     * @param withdrawTime - timestamp in seconds when 'withdraw' will be callable, or zero if the unlock has not been called\\n     * @param owner - address that receives revenue and manages relayManager's stake\\n     */\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelay;\\n        uint256 withdrawTime;\\n        uint256 abandonedTime;\\n        uint256 keepaliveTime;\\n        IERC20 token;\\n        address owner;\\n    }\\n\\n    struct RelayHubInfo {\\n        uint256 removalTime;\\n    }\\n\\n    /**\\n     * @param devAddress - the address that will receive the 'abandoned' stake\\n     * @param abandonmentDelay - the amount of time after which the relay can be marked as 'abandoned'\\n     * @param escheatmentDelay - the amount of time after which the abandoned relay's stake and balance may be withdrawn to the `devAddress`\\n     */\\n    struct AbandonedRelayServerConfig {\\n        address devAddress;\\n        uint256 abandonmentDelay;\\n        uint256 escheatmentDelay;\\n    }\\n\\n    /**\\n     * @notice Set the owner of a Relay Manager. Called only by the RelayManager itself.\\n     * Note that owners cannot transfer ownership - if the entry already exists, reverts.\\n     * @param owner - owner of the relay (as configured off-chain)\\n     */\\n    function setRelayManagerOwner(address owner) external;\\n\\n    /**\\n     * @notice Put a stake for a relayManager and set its unstake delay.\\n     * Only the owner can call this function. If the entry does not exist, reverts.\\n     * The owner must give allowance of the ERC-20 token to the StakeManager before calling this method.\\n     * It is the RelayHub who has a configurable list of minimum stakes per token. StakeManager accepts all tokens.\\n     * @param token The address of an ERC-20 token that is used by the relayManager as a stake\\n     * @param relayManager The address that represents a stake entry and controls relay registrations on relay hubs\\n     * @param unstakeDelay The number of seconds to elapse before an owner can retrieve the stake after calling `unlock`\\n     * @param amount The amount of tokens to be taken from the relayOwner and locked in the StakeManager as a stake\\n     */\\n    function stakeForRelayManager(IERC20 token, address relayManager, uint256 unstakeDelay, uint256 amount) external;\\n\\n    /**\\n     * @notice Schedule the unlocking of the stake. The `unstakeDelay` must pass before owner can call `withdrawStake`.\\n     * @param relayManager The address of a Relay Manager whose stake is to be unlocked.\\n     */\\n    function unlockStake(address relayManager) external;\\n    /**\\n     * @notice Withdraw the unlocked stake.\\n     * @param relayManager The address of a Relay Manager whose stake is to be withdrawn.\\n     */\\n    function withdrawStake(address relayManager) external;\\n\\n    /**\\n     * @notice Add the `RelayHub` to a list of authorized by this Relay Manager.\\n     * This allows the RelayHub to penalize this Relay Manager. The `RelayHub` cannot trust a Relay it cannot penalize.\\n     * @param relayManager The address of a Relay Manager whose stake is to be authorized for the new `RelayHub`.\\n     * @param relayHub The address of a `RelayHub` to be authorized.\\n     */\\n    function authorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    /**\\n     * @notice Same as `authorizeHubByOwner` but can be called by the RelayManager itself.\\n     */\\n    function authorizeHubByManager(address relayHub) external;\\n\\n    /**\\n     * @notice Remove the `RelayHub` from a list of authorized by this Relay Manager.\\n     * @param relayManager The address of a Relay Manager.\\n     * @param relayHub The address of a `RelayHub` to be unauthorized.\\n     */\\n    function unauthorizeHubByOwner(address relayManager, address relayHub) external;\\n\\n    /**\\n     * @notice Same as `unauthorizeHubByOwner` but can be called by the RelayManager itself.\\n     */\\n    function unauthorizeHubByManager(address relayHub) external;\\n\\n    /**\\n     * Slash the stake of the relay relayManager. In order to prevent stake kidnapping, burns part of stake on the way.\\n     * @param relayManager The address of a Relay Manager to be penalized.\\n     * @param beneficiary The address that receives part of the penalty amount.\\n     * @param amount A total amount of penalty to be withdrawn from stake.\\n     */\\n    function penalizeRelayManager(address relayManager, address beneficiary, uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the contract owner to set the given `relayManager` as abandoned after a configurable delay.\\n     * Its entire stake and balance will be taken from a relay if it does not respond to being marked as abandoned.\\n     */\\n    function markRelayAbandoned(address relayManager) external;\\n\\n    /**\\n     * @notice If more than `abandonmentDelay` has passed since the last Keepalive transaction, and relay manager\\n     * has been marked as abandoned, and after that more that `escheatmentDelay` have passed, entire stake and\\n     * balance will be taken from this relay.\\n     */\\n    function escheatAbandonedRelayStake(address relayManager) external;\\n\\n    /**\\n     * @notice Sets a new `keepaliveTime` for the given `relayManager`, preventing it from being marked as abandoned.\\n     * Can be called by an authorized `RelayHub` or by the `relayOwner` address.\\n     */\\n    function updateRelayKeepaliveTime(address relayManager) external;\\n\\n    /**\\n     * @notice Check if the Relay Manager can be considered abandoned or not.\\n     * Returns true if the stake's abandonment time is in the past including the escheatment delay, false otherwise.\\n     */\\n    function isRelayEscheatable(address relayManager) external view returns(bool);\\n\\n    /**\\n     * @notice Get the stake details information for the given Relay Manager.\\n     * @param relayManager The address of a Relay Manager.\\n     * @return stakeInfo The `StakeInfo` structure.\\n     * @return isSenderAuthorizedHub `true` if the `msg.sender` for this call was a `RelayHub` that is authorized now.\\n     * `false` if the `msg.sender` for this call is not authorized.\\n     */\\n    function getStakeInfo(address relayManager) external view returns (StakeInfo memory stakeInfo, bool isSenderAuthorizedHub);\\n\\n    /**\\n     * @return The maximum unstake delay this `StakeManger` allows. This is to prevent locking money forever by mistake.\\n     */\\n    function getMaxUnstakeDelay() external view returns (uint256);\\n\\n    /**\\n     * @notice Change the address that will receive the 'burned' part of the penalized stake.\\n     * This is done to prevent malicious Relay Server from penalizing itself and breaking even.\\n     */\\n    function setBurnAddress(address _burnAddress) external;\\n\\n    /**\\n     * @return The address that will receive the 'burned' part of the penalized stake.\\n     */\\n    function getBurnAddress() external view returns (address);\\n\\n    /**\\n     * @notice Change the address that will receive the 'abandoned' stake.\\n     * This is done to prevent Relay Servers that lost their keys from losing access to funds.\\n     */\\n    function setDevAddress(address _burnAddress) external;\\n\\n    /**\\n     * @return The structure that contains all configuration values for the 'abandoned' stake.\\n     */\\n    function getAbandonedRelayServerConfig() external view returns (AbandonedRelayServerConfig memory);\\n\\n    /**\\n     * @return the block number in which the contract has been deployed.\\n     */\\n    function getCreationBlock() external view returns (uint256);\\n\\n    /**\\n     * @return a SemVer-compliant version of the `StakeManager` contract.\\n     */\\n    function versionSM() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x77035b55ca4c09cb499bc0cab3f9e791d77597b148dbfee8bf94ca6c0039c3e0\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/utils/GsnEip712Library.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\npragma abicoder v2;\\n\\nimport \\\"../utils/GsnTypes.sol\\\";\\nimport \\\"../interfaces/IERC2771Recipient.sol\\\";\\nimport \\\"../forwarder/IForwarder.sol\\\";\\n\\nimport \\\"./GsnUtils.sol\\\";\\n\\n/**\\n * @title The ERC-712 Library for GSN\\n * @notice Bridge Library to convert a GSN RelayRequest into a valid `ForwardRequest` for a `Forwarder`.\\n */\\nlibrary GsnEip712Library {\\n    // maximum length of return value/revert reason for 'execute' method. Will truncate result if exceeded.\\n    uint256 private constant MAX_RETURN_SIZE = 1024;\\n\\n    //copied from Forwarder (can't reference string constants even from another library)\\n    string public constant GENERIC_PARAMS = \\\"address from,address to,uint256 value,uint256 gas,uint256 nonce,bytes data,uint256 validUntilTime\\\";\\n\\n    bytes public constant RELAYDATA_TYPE = \\\"RelayData(uint256 maxFeePerGas,uint256 maxPriorityFeePerGas,uint256 transactionCalldataGasUsed,address relayWorker,address paymaster,address forwarder,bytes paymasterData,uint256 clientId)\\\";\\n\\n    string public constant RELAY_REQUEST_NAME = \\\"RelayRequest\\\";\\n    string public constant RELAY_REQUEST_SUFFIX = string(abi.encodePacked(\\\"RelayData relayData)\\\", RELAYDATA_TYPE));\\n\\n    bytes public constant RELAY_REQUEST_TYPE = abi.encodePacked(\\n        RELAY_REQUEST_NAME,\\\"(\\\",GENERIC_PARAMS,\\\",\\\", RELAY_REQUEST_SUFFIX);\\n\\n    bytes32 public constant RELAYDATA_TYPEHASH = keccak256(RELAYDATA_TYPE);\\n    bytes32 public constant RELAY_REQUEST_TYPEHASH = keccak256(RELAY_REQUEST_TYPE);\\n\\n\\n    struct EIP712Domain {\\n        string name;\\n        string version;\\n        uint256 chainId;\\n        address verifyingContract;\\n    }\\n\\n    bytes32 public constant EIP712DOMAIN_TYPEHASH = keccak256(\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n    );\\n\\n    function splitRequest(\\n        GsnTypes.RelayRequest calldata req\\n    )\\n    internal\\n    pure\\n    returns (\\n        bytes memory suffixData\\n    ) {\\n        suffixData = abi.encode(\\n            hashRelayData(req.relayData));\\n    }\\n\\n    //verify that the recipient trusts the given forwarder\\n    // MUST be called by paymaster\\n    function verifyForwarderTrusted(GsnTypes.RelayRequest calldata relayRequest) internal view {\\n        (bool success, bytes memory ret) = relayRequest.request.to.staticcall(\\n            abi.encodeWithSelector(\\n                IERC2771Recipient.isTrustedForwarder.selector, relayRequest.relayData.forwarder\\n            )\\n        );\\n        require(success, \\\"isTrustedForwarder: reverted\\\");\\n        require(ret.length == 32, \\\"isTrustedForwarder: bad response\\\");\\n        require(abi.decode(ret, (bool)), \\\"invalid forwarder for recipient\\\");\\n    }\\n\\n    function verifySignature(\\n        string memory domainSeparatorName,\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature\\n    ) internal view {\\n        (bytes memory suffixData) = splitRequest(relayRequest);\\n        bytes32 _domainSeparator = domainSeparator(domainSeparatorName, relayRequest.relayData.forwarder);\\n        IForwarder forwarder = IForwarder(payable(relayRequest.relayData.forwarder));\\n        forwarder.verify(relayRequest.request, _domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature);\\n    }\\n\\n    function verify(\\n        string memory domainSeparatorName,\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature\\n    ) internal view {\\n        verifyForwarderTrusted(relayRequest);\\n        verifySignature(domainSeparatorName, relayRequest, signature);\\n    }\\n\\n    function execute(\\n        string memory domainSeparatorName,\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature\\n    ) internal returns (\\n        bool forwarderSuccess,\\n        bool callSuccess,\\n        bytes memory ret\\n    ) {\\n        (bytes memory suffixData) = splitRequest(relayRequest);\\n        bytes32 _domainSeparator = domainSeparator(domainSeparatorName, relayRequest.relayData.forwarder);\\n        /* solhint-disable-next-line avoid-low-level-calls */\\n        (forwarderSuccess, ret) = relayRequest.relayData.forwarder.call(\\n            abi.encodeWithSelector(IForwarder.execute.selector,\\n            relayRequest.request, _domainSeparator, RELAY_REQUEST_TYPEHASH, suffixData, signature\\n        ));\\n        if ( forwarderSuccess ) {\\n\\n          //decode return value of execute:\\n          (callSuccess, ret) = abi.decode(ret, (bool, bytes));\\n        }\\n        truncateInPlace(ret);\\n    }\\n\\n    //truncate the given parameter (in-place) if its length is above the given maximum length\\n    // do nothing otherwise.\\n    //NOTE: solidity warns unless the method is marked \\\"pure\\\", but it DOES modify its parameter.\\n    function truncateInPlace(bytes memory data) internal pure {\\n        MinLibBytes.truncateInPlace(data, MAX_RETURN_SIZE);\\n    }\\n\\n    function domainSeparator(string memory name, address forwarder) internal view returns (bytes32) {\\n        return hashDomain(EIP712Domain({\\n            name : name,\\n            version : \\\"3\\\",\\n            chainId : getChainID(),\\n            verifyingContract : forwarder\\n            }));\\n    }\\n\\n    function getChainID() internal view returns (uint256 id) {\\n        /* solhint-disable no-inline-assembly */\\n        assembly {\\n            id := chainid()\\n        }\\n    }\\n\\n    function hashDomain(EIP712Domain memory req) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                EIP712DOMAIN_TYPEHASH,\\n                keccak256(bytes(req.name)),\\n                keccak256(bytes(req.version)),\\n                req.chainId,\\n                req.verifyingContract));\\n    }\\n\\n    function hashRelayData(GsnTypes.RelayData calldata req) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n                RELAYDATA_TYPEHASH,\\n                req.maxFeePerGas,\\n                req.maxPriorityFeePerGas,\\n                req.transactionCalldataGasUsed,\\n                req.relayWorker,\\n                req.paymaster,\\n                req.forwarder,\\n                keccak256(req.paymasterData),\\n                req.clientId\\n            ));\\n    }\\n}\\n\",\"keccak256\":\"0x73b5828c2578aea26dbd21cea00f1a245c94f9720ffd95932777ee6121e31972\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/utils/GsnTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../forwarder/IForwarder.sol\\\";\\n\\ninterface GsnTypes {\\n    /// @notice maxFeePerGas, maxPriorityFeePerGas, pctRelayFee and baseRelayFee must be validated inside of the paymaster's preRelayedCall in order not to overpay\\n    struct RelayData {\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        uint256 transactionCalldataGasUsed;\\n        address relayWorker;\\n        address paymaster;\\n        address forwarder;\\n        bytes paymasterData;\\n        uint256 clientId;\\n    }\\n\\n    //note: must start with the ForwardRequest to be an extension of the generic forwarder\\n    struct RelayRequest {\\n        IForwarder.ForwardRequest request;\\n        RelayData relayData;\\n    }\\n}\\n\",\"keccak256\":\"0x9fb51c540f32939f1ee291e3fa709be64f7c73485bd7b87c6624c3567dd42a1b\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/utils/GsnUtils.sol\":{\"content\":\"/* solhint-disable no-inline-assembly */\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/MinLibBytes.sol\\\";\\nimport \\\"./GsnTypes.sol\\\";\\n\\n/**\\n * @title The GSN Solidity Utils Library\\n * @notice Some library functions used throughout the GSN Solidity codebase.\\n */\\nlibrary GsnUtils {\\n\\n    bytes32 constant private RELAY_REQUEST_ID_MASK = 0x00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    /**\\n     * @notice Calculate an identifier for the meta-transaction in a format similar to a transaction hash.\\n     * Note that uniqueness relies on signature and may not be enforced if meta-transactions are verified\\n     * with a different algorithm, e.g. when batching.\\n     * @param relayRequest The `RelayRequest` for which an ID is being calculated.\\n     * @param signature The signature for the `RelayRequest`. It is not validated here and may even remain empty.\\n     */\\n    function getRelayRequestID(GsnTypes.RelayRequest calldata relayRequest, bytes calldata signature)\\n    internal\\n    pure\\n    returns (bytes32) {\\n        return keccak256(abi.encode(relayRequest.request.from, relayRequest.request.nonce, signature)) & RELAY_REQUEST_ID_MASK;\\n    }\\n\\n    /**\\n     * @notice Extract the method identifier signature from the encoded function call.\\n     */\\n    function getMethodSig(bytes memory msgData) internal pure returns (bytes4) {\\n        return MinLibBytes.readBytes4(msgData, 0);\\n    }\\n\\n    /**\\n     * @notice Extract a parameter from encoded-function block.\\n     * see: https://solidity.readthedocs.io/en/develop/abi-spec.html#formal-specification-of-the-encoding\\n     * The return value should be casted to the right type (`uintXXX`/`bytesXXX`/`address`/`bool`/`enum`).\\n     * @param msgData Byte array containing a uint256 value.\\n     * @param index Index in byte array of uint256 value.\\n     * @return result uint256 value from byte array.\\n     */\\n    function getParam(bytes memory msgData, uint256 index) internal pure returns (uint256 result) {\\n        return MinLibBytes.readUint256(msgData, 4 + index * 32);\\n    }\\n\\n    /// @notice Re-throw revert with the same revert data.\\n    function revertWithData(bytes memory data) internal pure {\\n        assembly {\\n            revert(add(data,32), mload(data))\\n        }\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7ea79bac2508612eba2c9372a7a4af953218b4ee2721e273f6d368e76b1ae7bb\",\"license\":\"GPL-3.0-only\"},\"@opengsn/contracts/src/utils/MinLibBytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// minimal bytes manipulation required by GSN\\n// a minimal subset from 0x/LibBytes\\n/* solhint-disable no-inline-assembly */\\npragma solidity ^0.8.0;\\n\\nlibrary MinLibBytes {\\n\\n    //truncate the given parameter (in-place) if its length is above the given maximum length\\n    // do nothing otherwise.\\n    //NOTE: solidity warns unless the method is marked \\\"pure\\\", but it DOES modify its parameter.\\n    function truncateInPlace(bytes memory data, uint256 maxlen) internal pure {\\n        if (data.length > maxlen) {\\n            assembly { mstore(data, maxlen) }\\n        }\\n    }\\n\\n    /// @dev Reads an address from a position in a byte array.\\n    /// @param b Byte array containing an address.\\n    /// @param index Index in byte array of address.\\n    /// @return result address from byte array.\\n    function readAddress(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (address result)\\n    {\\n        require (b.length >= index + 20, \\\"readAddress: data too short\\\");\\n\\n        // Add offset to index:\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n        index += 20;\\n\\n        // Read address from array memory\\n        assembly {\\n            // 1. Add index to address of bytes array\\n            // 2. Load 32-byte word from memory\\n            // 3. Apply 20-byte mask to obtain address\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n        return result;\\n    }\\n\\n    function readBytes32(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes32 result)\\n    {\\n        require(b.length >= index + 32, \\\"readBytes32: data too short\\\" );\\n\\n        // Read the bytes32 from array memory\\n        assembly {\\n            result := mload(add(b, add(index,32)))\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n    /// @param b Byte array containing a uint256 value.\\n    /// @param index Index in byte array of uint256 value.\\n    /// @return result uint256 value from byte array.\\n    function readUint256(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (uint256 result)\\n    {\\n        result = uint256(readBytes32(b, index));\\n        return result;\\n    }\\n\\n    function readBytes4(\\n        bytes memory b,\\n        uint256 index\\n    )\\n        internal\\n        pure\\n        returns (bytes4 result)\\n    {\\n        require(b.length >= index + 4, \\\"readBytes4: data too short\\\");\\n\\n        // Read the bytes4 from array memory\\n        assembly {\\n            result := mload(add(b, add(index,32)))\\n            // Solidity does not require us to clean the trailing bytes.\\n            // We do it anyway\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n        }\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8063af8e0f134be3d794ad39bdc0041f33a16c91a4ee7abb968d4c15c8d10c54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x6ac3ebc0fe0ac3a70a561aa19210b49af9aa530b89ebb1cdc8a5901aabf7212e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Paymaster.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@opengsn/contracts/src/BasePaymaster.sol\\\";\\n\\n/**\\n * a paymaster for a single recipient contract.\\n * - reject requests if destination is not the target contract.\\n * - reject any request if the target contract reverts.\\n */\\ncontract PaymasterContract is BasePaymaster {\\n\\n    address public target;\\n    address public userAddress = 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266;\\n    \\n    event TargetChanged(address oldTarget, address newTarget);\\n\\n    function versionPaymaster() external view override virtual returns (string memory){\\n        return \\\"3.0.0-beta.3+opengsn.recipient.ipaymaster\\\";\\n    }\\n\\n    function setTarget(address _target) external onlyOwner {\\n        emit TargetChanged(target, _target);\\n        target=_target;\\n    }\\n\\n    function _preRelayedCall(\\n        GsnTypes.RelayRequest calldata relayRequest,\\n        bytes calldata signature,\\n        bytes calldata approvalData,\\n        uint256 maxPossibleGas\\n    )\\n    internal\\n    override\\n    virtual\\n    returns (bytes memory context, bool revertOnRecipientRevert) {\\n        (relayRequest, signature, approvalData, maxPossibleGas);\\n        // require(relayRequest.request.from==userAddress, \\\"wrong target\\\");\\n        require(relayRequest.request.to==target, \\\"wrong user\\\");\\n\\t//returning \\\"true\\\" means this paymaster accepts all requests that\\n\\t// are not rejected by the recipient contract.\\n        return (\\\"\\\", true);\\n    }\\n\\n    function _postRelayedCall(\\n        bytes calldata context,\\n        bool success,\\n        uint256 gasUseWithoutPost,\\n        GsnTypes.RelayData calldata relayData\\n    )\\n    internal\\n    override\\n    virtual {\\n        (context, success, gasUseWithoutPost, relayData);\\n    }\\n}\",\"keccak256\":\"0x90ec4de0d05005e7084a2edc4d2890fd7155f1958bbf4829555395b55543cc1f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061012d5760003560e01c8063921276ea116100ab578063d4b839921161006f578063d4b83992146104e1578063da7422281461050c578063df463a6614610535578063e4128fb314610560578063f2fde38b1461058b578063f9c002f7146105b45761024e565b8063921276ea1461040a578063b039a88f14610435578063b90b41cf14610460578063bbdaa3c91461048b578063ce1b815f146104b65761024e565b806376fa01c3116100f257806376fa01c314610339578063776d1a01146103625780637bb052641461038b5780637bdf2ec7146103b45780638da5cb5b146103df5761024e565b8062be5dd41461025357806301ffc9a7146102915780632d14c4b7146102ce5780635c5e3db1146102f7578063715018a6146103225761024e565b3661024e57600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036101c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ba90611473565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aa67c91934306040518363ffffffff1660e01b815260040161021f91906114d4565b6000604051808303818588803b15801561023857600080fd5b505af115801561024c573d6000803e3d6000fd5b005b600080fd5b34801561025f57600080fd5b5061027a600480360381019061027591906115b8565b6105df565b604051610288929190611726565b60405180910390f35b34801561029d57600080fd5b506102b860048036038101906102b391906117ae565b61062d565b6040516102c591906117db565b60405180910390f35b3480156102da57600080fd5b506102f560048036038101906102f09190611834565b61070f565b005b34801561030357600080fd5b5061030c6107aa565b6040516103199190611883565b60405180910390f35b34801561032e57600080fd5b506103376107b0565b005b34801561034557600080fd5b50610360600480360381019061035b91906118ea565b6107c4565b005b34801561036e57600080fd5b50610389600480360381019061038491906119ba565b6107e0565b005b34801561039757600080fd5b506103b260048036038101906103ad9190611a25565b610887565b005b3480156103c057600080fd5b506103c961095b565b6040516103d691906114d4565b60405180910390f35b3480156103eb57600080fd5b506103f4610985565b60405161040191906114d4565b60405180910390f35b34801561041657600080fd5b5061041f6109ae565b60405161042c9190611a96565b60405180910390f35b34801561044157600080fd5b5061044a6109ce565b6040516104579190611b1c565b60405180910390f35b34801561046c57600080fd5b50610475610a14565b6040516104829190611883565b60405180910390f35b34801561049757600080fd5b506104a0610a1a565b6040516104ad9190611883565b60405180910390f35b3480156104c257600080fd5b506104cb610a21565b6040516104d891906114d4565b60405180910390f35b3480156104ed57600080fd5b506104f6610a4b565b60405161050391906114d4565b60405180910390f35b34801561051857600080fd5b50610533600480360381019061052e91906119ba565b610a71565b005b34801561054157600080fd5b5061054a610b45565b6040516105579190611883565b60405180910390f35b34801561056c57600080fd5b50610575610b59565b60405161058291906114d4565b60405180910390f35b34801561059757600080fd5b506105b260048036038101906105ad91906119ba565b610b7f565b005b3480156105c057600080fd5b506105c9610c02565b6040516105d69190611883565b60405180910390f35b606060006105eb610c09565b6105f488610c80565b6105fd88610d22565b61060688610d7b565b6106108585610de1565b61061e888888888888610e2b565b91509150965096945050505050565b60007fe1ab2dea000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106f857507f0e083076000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610708575061070782610f02565b5b9050919050565b610717610f6c565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a382846040518363ffffffff1660e01b8152600401610774929190611b46565b600060405180830381600087803b15801561078e57600080fd5b505af11580156107a2573d6000803e3d6000fd5b505050505050565b61290481565b6107b8610f6c565b6107c26000610fea565b565b6107cc610c09565b6107d985858585856110ae565b5050505050565b6107e8610f6c565b7f4d11d6210a5e807da812a693b5d341a870571b5fc31158172207a3d99c911ccd600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168260405161083b929190611b6f565b60405180910390a180600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61088f610f6c565b6108d87fe9fb30f7000000000000000000000000000000000000000000000000000000008273ffffffffffffffffffffffffffffffffffffffff166110b590919063ffffffff16565b610917576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090e90611be4565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060405180606001604052806029815260200161232060299139905090565b6109d66113ee565b604051806080016040528061c350620186a06109f29190611c33565b8152602001620186a081526020016201adb08152602001612904815250905090565b61c35081565b6201adb081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610a79610f6c565b610ac27f25e23e64000000000000000000000000000000000000000000000000000000008273ffffffffffffffffffffffffffffffffffffffff166110b590919063ffffffff16565b610b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af890611cb3565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61c350620186a0610b569190611c33565b81565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610b87610f6c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bed90611d45565b60405180910390fd5b610bff81610fea565b50565b620186a081565b610c1161095b565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610c7e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7590611db1565b60405180910390fd5b565b808060200190610c909190611de0565b60a0016020810190610ca291906119ba565b73ffffffffffffffffffffffffffffffffffffffff16610cc0610a21565b73ffffffffffffffffffffffffffffffffffffffff1614610d16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0d90611e55565b60405180910390fd5b610d1f816110da565b50565b6000818060000190610d349190611e75565b6040013514610d78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d6f90611ee9565b60405180910390fd5b50565b6000818060200190610d8d9190611de0565b8060c00190610d9c9190611f09565b905014610dde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd590611fb8565b60405180910390fd5b50565b60008282905014610e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1e90612024565b60405180910390fd5b5050565b60606000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16888060000190610e789190611e75565b6020016020810190610e8a91906119ba565b73ffffffffffffffffffffffffffffffffffffffff1614610ee0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed790612090565b60405180910390fd5b6001604051806020016040528060008152509091509150965096945050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b610f746112da565b73ffffffffffffffffffffffffffffffffffffffff16610f92610985565b73ffffffffffffffffffffffffffffffffffffffff1614610fe8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fdf906120fc565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b5050505050565b60006110c0836112e2565b80156110d257506110d1838361132f565b5b905092915050565b6000808280600001906110ed9190611e75565b60200160208101906110ff91906119ba565b73ffffffffffffffffffffffffffffffffffffffff1663572b6c0560e01b84806020019061112d9190611de0565b60a001602081019061113f91906119ba565b60405160240161114f91906114d4565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516111b99190612158565b600060405180830381855afa9150503d80600081146111f4576040519150601f19603f3d011682016040523d82523d6000602084013e6111f9565b606091505b50915091508161123e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611235906121bb565b60405180910390fd5b6020815114611282576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127990612227565b60405180910390fd5b80806020019051810190611296919061225c565b6112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc906122d5565b60405180910390fd5b505050565b600033905090565b600061130e827f01ffc9a70000000000000000000000000000000000000000000000000000000061132f565b801561132857506113268263ffffffff60e01b61132f565b155b9050919050565b6000806301ffc9a760e01b8360405160240161134b9190612304565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000602060008551602087018a617530fa92503d915060005190508280156113d6575060208210155b80156113e25750600081115b94505050505092915050565b6040518060800160405280600081526020016000815260200160008152602001600081525090565b600082825260208201905092915050565b7f72656c6179206875622061646472657373206e6f742073657400000000000000600082015250565b600061145d601983611416565b915061146882611427565b602082019050919050565b6000602082019050818103600083015261148c81611450565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114be82611493565b9050919050565b6114ce816114b3565b82525050565b60006020820190506114e960008301846114c5565b92915050565b600080fd5b600080fd5b600080fd5b600060408284031215611514576115136114f9565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126115425761154161151d565b5b8235905067ffffffffffffffff81111561155f5761155e611522565b5b60208301915083600182028301111561157b5761157a611527565b5b9250929050565b6000819050919050565b61159581611582565b81146115a057600080fd5b50565b6000813590506115b28161158c565b92915050565b600080600080600080608087890312156115d5576115d46114ef565b5b600087013567ffffffffffffffff8111156115f3576115f26114f4565b5b6115ff89828a016114fe565b965050602087013567ffffffffffffffff8111156116205761161f6114f4565b5b61162c89828a0161152c565b9550955050604087013567ffffffffffffffff81111561164f5761164e6114f4565b5b61165b89828a0161152c565b9350935050606061166e89828a016115a3565b9150509295509295509295565b600081519050919050565b600082825260208201905092915050565b60005b838110156116b557808201518184015260208101905061169a565b60008484015250505050565b6000601f19601f8301169050919050565b60006116dd8261167b565b6116e78185611686565b93506116f7818560208601611697565b611700816116c1565b840191505092915050565b60008115159050919050565b6117208161170b565b82525050565b6000604082019050818103600083015261174081856116d2565b905061174f6020830184611717565b9392505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61178b81611756565b811461179657600080fd5b50565b6000813590506117a881611782565b92915050565b6000602082840312156117c4576117c36114ef565b5b60006117d284828501611799565b91505092915050565b60006020820190506117f06000830184611717565b92915050565b600061180182611493565b9050919050565b611811816117f6565b811461181c57600080fd5b50565b60008135905061182e81611808565b92915050565b6000806040838503121561184b5761184a6114ef565b5b6000611859858286016115a3565b925050602061186a8582860161181f565b9150509250929050565b61187d81611582565b82525050565b60006020820190506118986000830184611874565b92915050565b6118a78161170b565b81146118b257600080fd5b50565b6000813590506118c48161189e565b92915050565b600061010082840312156118e1576118e06114f9565b5b81905092915050565b600080600080600060808688031215611906576119056114ef565b5b600086013567ffffffffffffffff811115611924576119236114f4565b5b6119308882890161152c565b95509550506020611943888289016118b5565b9350506040611954888289016115a3565b925050606086013567ffffffffffffffff811115611975576119746114f4565b5b611981888289016118ca565b9150509295509295909350565b611997816114b3565b81146119a257600080fd5b50565b6000813590506119b48161198e565b92915050565b6000602082840312156119d0576119cf6114ef565b5b60006119de848285016119a5565b91505092915050565b60006119f2826114b3565b9050919050565b611a02816119e7565b8114611a0d57600080fd5b50565b600081359050611a1f816119f9565b92915050565b600060208284031215611a3b57611a3a6114ef565b5b6000611a4984828501611a10565b91505092915050565b600081519050919050565b6000611a6882611a52565b611a728185611416565b9350611a82818560208601611697565b611a8b816116c1565b840191505092915050565b60006020820190508181036000830152611ab08184611a5d565b905092915050565b611ac181611582565b82525050565b608082016000820151611add6000850182611ab8565b506020820151611af06020850182611ab8565b506040820151611b036040850182611ab8565b506060820151611b166060850182611ab8565b50505050565b6000608082019050611b316000830184611ac7565b92915050565b611b40816117f6565b82525050565b6000604082019050611b5b6000830185611b37565b611b686020830184611874565b9392505050565b6000604082019050611b8460008301856114c5565b611b9160208301846114c5565b9392505050565b7f746172676574206973206e6f7420612076616c6964204952656c617948756200600082015250565b6000611bce601f83611416565b9150611bd982611b98565b602082019050919050565b60006020820190508181036000830152611bfd81611bc1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c3e82611582565b9150611c4983611582565b9250828201905080821115611c6157611c60611c04565b5b92915050565b7f746172676574206973206e6f7420612076616c69642049466f72776172646572600082015250565b6000611c9d602083611416565b9150611ca882611c67565b602082019050919050565b60006020820190508181036000830152611ccc81611c90565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611d2f602683611416565b9150611d3a82611cd3565b604082019050919050565b60006020820190508181036000830152611d5e81611d22565b9050919050565b7f63616e206f6e6c792062652063616c6c65642062792052656c61794875620000600082015250565b6000611d9b601e83611416565b9150611da682611d65565b602082019050919050565b60006020820190508181036000830152611dca81611d8e565b9050919050565b600080fd5b600080fd5b600080fd5b60008235600161010003833603038112611dfd57611dfc611dd1565b5b80830191505092915050565b7f466f72776172646572206973206e6f7420747275737465640000000000000000600082015250565b6000611e3f601883611416565b9150611e4a82611e09565b602082019050919050565b60006020820190508181036000830152611e6e81611e32565b9050919050565b60008235600160e003833603038112611e9157611e90611dd1565b5b80830191505092915050565b7f76616c7565207472616e73666572206e6f7420737570706f7274656400000000600082015250565b6000611ed3601c83611416565b9150611ede82611e9d565b602082019050919050565b60006020820190508181036000830152611f0281611ec6565b9050919050565b60008083356001602003843603038112611f2657611f25611dd1565b5b80840192508235915067ffffffffffffffff821115611f4857611f47611dd6565b5b602083019250600182023603831315611f6457611f63611ddb565b5b509250929050565b7f73686f756c642068617665206e6f207061796d61737465724461746100000000600082015250565b6000611fa2601c83611416565b9150611fad82611f6c565b602082019050919050565b60006020820190508181036000830152611fd181611f95565b9050919050565b7f73686f756c642068617665206e6f20617070726f76616c446174610000000000600082015250565b600061200e601b83611416565b915061201982611fd8565b602082019050919050565b6000602082019050818103600083015261203d81612001565b9050919050565b7f77726f6e67207573657200000000000000000000000000000000000000000000600082015250565b600061207a600a83611416565b915061208582612044565b602082019050919050565b600060208201905081810360008301526120a98161206d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006120e6602083611416565b91506120f1826120b0565b602082019050919050565b60006020820190508181036000830152612115816120d9565b9050919050565b600081905092915050565b60006121328261167b565b61213c818561211c565b935061214c818560208601611697565b80840191505092915050565b60006121648284612127565b915081905092915050565b7f697354727573746564466f727761726465723a20726576657274656400000000600082015250565b60006121a5601c83611416565b91506121b08261216f565b602082019050919050565b600060208201905081810360008301526121d481612198565b9050919050565b7f697354727573746564466f727761726465723a2062616420726573706f6e7365600082015250565b6000612211602083611416565b915061221c826121db565b602082019050919050565b6000602082019050818103600083015261224081612204565b9050919050565b6000815190506122568161189e565b92915050565b600060208284031215612272576122716114ef565b5b600061228084828501612247565b91505092915050565b7f696e76616c696420666f7277617264657220666f7220726563697069656e7400600082015250565b60006122bf601f83611416565b91506122ca82612289565b602082019050919050565b600060208201905081810360008301526122ee816122b2565b9050919050565b6122fe81611756565b82525050565b600060208201905061231960008301846122f5565b9291505056fe332e302e302d626574612e332b6f70656e67736e2e726563697069656e742e697061796d6173746572a26469706673582212203025b8631df30ff47374b2ce5105a5de1cd093e419c9af13b07c426702228fc764736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getGasAndDataLimits()": {
        "returns": {
          "limits": "An instance of the `GasAndDataLimits` struct ##### `acceptanceBudget` If the transactions consumes more than `acceptanceBudget` this Paymaster will be charged for gas no matter what. Transaction that gets rejected after consuming more than `acceptanceBudget` gas is on this Paymaster's expense. Should be set to an amount gas this Paymaster expects to spend deciding whether to accept or reject a request. This includes gas consumed by calculations in the `preRelayedCall`, `Forwarder` and the recipient contract. :warning: **Warning** :warning: As long this value is above `preRelayedCallGasLimit` (see defaults in `BasePaymaster`), the Paymaster is guaranteed it will never pay for rejected transactions. If this value is below `preRelayedCallGasLimit`, it might might make Paymaster open to a \"griefing\" attack. The relayers should prefer lower `acceptanceBudget`, as it improves their chances of being compensated. From a Relay's point of view, this is the highest gas value a bad Paymaster may cost the relay, since the paymaster will pay anything above that value regardless of whether the transaction succeeds or reverts. Specifying value too high might make the call rejected by relayers (see `maxAcceptanceBudget` in server config). ##### `preRelayedCallGasLimit` The max gas usage of preRelayedCall. Any revert of the `preRelayedCall` is a request rejection by the paymaster. As long as `acceptanceBudget` is above `preRelayedCallGasLimit`, any such revert is not payed by the paymaster. ##### `postRelayedCallGasLimit` The max gas usage of postRelayedCall. The Paymaster is not charged for the maximum, only for actually used gas. Note that an OOG will revert the inner transaction, but the paymaster will be charged for it anyway."
        }
      },
      "getRelayHub()": {
        "returns": {
          "_0": "The address of the `RelayHub` that is trusted by this Paymaster to execute the requests."
        }
      },
      "getTrustedForwarder()": {
        "returns": {
          "_0": "The address of the `Forwarder` that is trusted by this Paymaster to execute the requests."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))": {
        "params": {
          "context": "The call context, as returned by the preRelayedCall",
          "gasUseWithoutPost": "The actual amount of gas used by the entire transaction, EXCEPT        the gas used by the postRelayedCall itself.",
          "relayData": "The relay params of the request. can be used by relayHub.calculateCharge()",
          "success": "`true` if the relayed call succeeded, false if it reverted"
        }
      },
      "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)": {
        "params": {
          "approvalData": "- extra dapp-specific data (e.g. signature from trusted party)",
          "maxPossibleGas": "- based on values returned from `getGasAndDataLimits` the RelayHub will calculate the maximum possible amount of gas the user may be charged for. In order to convert this value to wei, the Paymaster has to call \"relayHub.calculateCharge()\"",
          "relayRequest": "- the full relay request structure",
          "signature": "- user's EIP712-compatible signature of the `relayRequest`. Note that in most cases the paymaster shouldn't try use it at all. It is always checked by the forwarder immediately after preRelayedCall returns."
        },
        "returns": {
          "_0": "A byte array to be passed to postRelayedCall. Can contain any data needed by this Paymaster in any form or be empty if no extra data is needed.",
          "_1": "The flag that allows a Paymaster to \"delegate\" the rejection to the recipient code. It also means the Paymaster trust the recipient to reject fast: both preRelayedCall, forwarder check and recipient checks must fit into the GasLimits.acceptanceBudget, otherwise the TX is paid by the Paymaster. `true` if the Paymaster wants to reject the TX if the recipient reverts. `false` if the Paymaster wants rejects by the recipient to be completed on chain and paid by the Paymaster."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "versionPaymaster()": {
        "returns": {
          "_0": "version The SemVer string of this Paymaster's version."
        }
      },
      "withdrawRelayHubDepositTo(uint256,address)": {
        "params": {
          "amount": "The amount to be subtracted from the sender.",
          "target": "The target to which the amount will be transferred."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getGasAndDataLimits()": {
        "notice": "Return the Gas Limits for Paymaster's functions and maximum msg.data length values for this Paymaster. This function allows different paymasters to have different properties without changes to the RelayHub."
      },
      "getTrustedForwarder()": {
        "notice": ":warning: **Warning** :warning: using incorrect Forwarder may cause the Paymaster to agreeing to pay for invalid transactions."
      },
      "postRelayedCall(bytes,bool,uint256,(uint256,uint256,uint256,address,address,address,bytes,uint256))": {
        "notice": "This method is called after the actual relayed function call. It may be used to record the transaction (e.g. charge the caller by some contract logic) for this call. Revert in this functions causes a revert of the client's relayed call (and preRelayedCall(), but the Paymaster is still committed to pay the relay for the entire transaction."
      },
      "preRelayedCall(((address,address,uint256,uint256,uint256,bytes,uint256),(uint256,uint256,uint256,address,address,address,bytes,uint256)),bytes,bytes,uint256)": {
        "notice": "Called by the Relay in view mode and later by the `RelayHub` on-chain to validate that the Paymaster agrees to pay for this call. The request is considered to be rejected by the Paymaster in one of the following conditions:  - `preRelayedCall()` method reverts  - the `Forwarder` reverts because of nonce or signature error  - the `Paymaster` returned `rejectOnRecipientRevert: true` and the recipient contract reverted    (and all that did not consume more than `acceptanceBudget` gas). In any of the above cases, all Paymaster calls and the recipient call are reverted. In any other case the Paymaster will pay for the gas cost of the transaction. Note that even if `postRelayedCall` is reverted the Paymaster will be charged."
      },
      "setRelayHub(address)": {
        "notice": "The owner of the Paymaster can change the instance of the RelayHub this Paymaster works with. :warning: **Warning** :warning: The deposit on the previous RelayHub must be withdrawn first."
      },
      "setTrustedForwarder(address)": {
        "notice": "The owner of the Paymaster can change the instance of the Forwarder this Paymaster works with.the Recipients must trust this Forwarder as well in order for the configuration to remain functional."
      },
      "withdrawRelayHubDepositTo(uint256,address)": {
        "notice": "Withdraw deposit from the RelayHub."
      }
    },
    "notice": "a paymaster for a single recipient contract. - reject requests if destination is not the target contract. - reject any request if the target contract reverts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1863,
        "contract": "contracts/Paymaster.sol:PaymasterContract",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 23,
        "contract": "contracts/Paymaster.sol:PaymasterContract",
        "label": "relayHub",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IRelayHub)955"
      },
      {
        "astId": 25,
        "contract": "contracts/Paymaster.sol:PaymasterContract",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2310,
        "contract": "contracts/Paymaster.sol:PaymasterContract",
        "label": "target",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2313,
        "contract": "contracts/Paymaster.sol:PaymasterContract",
        "label": "userAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IRelayHub)955": {
        "encoding": "inplace",
        "label": "contract IRelayHub",
        "numberOfBytes": "20"
      }
    }
  }
}